---
import Layout from "../layouts/Layout.astro";
import { Image } from 'astro:assets';

const title = "Weather App Map";
const apiKey = process.env.WEATHER_API_KEY;

// Check if there's a stored city in localStorage (client-side only)
// For server-side rendering, we'll use a loading state
let locationToUse = null;
let lat = null;
let lon = null;
let locationName = null;
let countryName = null;
let weatherData = null;
let isLoading = true;

// Only fetch data server-side if we have a specific city to show
if (locationToUse) {
  try {
    const response = await fetch(
      `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${encodeURIComponent(locationToUse)}&aqi=no`
    );
    
    if (response.ok) {
      const data = await response.json();
      lat = data.location.lat;
      lon = data.location.lon;
      locationName = data.location.name;
      countryName = data.location.country;
      weatherData = data.current;
      isLoading = false;
    }
  } catch (error) {
    console.error("Error fetching weather data:", error);
  }
}
---

<Layout {title}>
  <div class="min-h-screen bg-gradient-to-br from-green-50 to-blue-50">
    <div class="container mx-auto px-4 py-8">
      <!-- Logo and Title -->
      <div class="flex justify-center items-center mb-8">
        <div class="logo-container relative">
          <div class="logo-circle w-16 h-16 rounded-full bg-gradient-to-r from-green-400 to-teal-500 flex items-center justify-center shadow-lg animate-pulse">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z" />
            </svg>
          </div>
          <div class="logo-ring absolute top-0 left-0 w-16 h-16 rounded-full border-4 border-green-300 opacity-70 animate-ping"></div>
        </div>
        <h1 class="text-3xl font-bold ml-4 text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-teal-700">
          {isLoading ? "Weather Map" : `${locationName}, ${countryName}`}
        </h1>
      </div>
      
      <!-- Map container with glass morphism effect -->
      <div class="backdrop-blur-sm bg-white/30 p-2 rounded-2xl shadow-xl mb-8 transform transition-all duration-500 hover:scale-[1.01] border border-green-100">
        <div id="weather-map" class="h-[500px] w-full rounded-xl overflow-hidden">
          {isLoading && (
            <div class="flex items-center justify-center h-full bg-gradient-to-br from-green-50 to-blue-50 rounded-xl">
              <div class="text-center">
                <div class="inline-block animate-spin mb-4 text-5xl text-green-500">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                </div>
                <p class="text-xl font-medium text-green-700">Loading map...</p>
                <p class="text-green-600 mt-2">Please search for a city to view the weather.</p>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <!-- Weather info card with glass morphism -->
      {weatherData ? (
        <div class="backdrop-blur-sm bg-white/40 p-6 rounded-2xl shadow-lg mb-8 transform transition-all duration-500 hover:shadow-xl border border-green-100">
          <h2 class="text-xl font-semibold mb-6 text-green-800 flex items-center">
            <span class="mr-2">Current Weather in {locationName}, {countryName}</span>
            <Image src={weatherData.condition.icon} width={40} height={40} alt="Weather info" />
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="text-center p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-xl shadow-inner transform transition-all duration-300 hover:translate-y-[-5px]">
              <p class="text-sm text-green-700 font-medium">Temperature</p>
              <p class="text-3xl font-bold text-green-600">{weatherData.temp_c}°C</p>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-xl shadow-inner transform transition-all duration-300 hover:translate-y-[-5px]">
              <p class="text-sm text-green-700 font-medium">Condition</p>
              <p class="text-xl font-medium text-green-800">{weatherData.condition.text}</p>
            </div>
            <div class="text-center p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-xl shadow-inner transform transition-all duration-300 hover:translate-y-[-5px]">
              <p class="text-sm text-green-700 font-medium">Wind</p>
              <p class="text-xl font-medium text-green-800">{weatherData.wind_kph} km/h</p>
            </div>
          </div>
        </div>
      ) : (
        <div class="backdrop-blur-sm bg-white/40 p-6 rounded-2xl shadow-lg mb-8 text-center border border-green-100">
          <h2 class="text-xl font-semibold mb-4 text-green-800">
            Weather Information
          </h2>
          <p class="text-green-700">Search for a city to view weather information.</p>
        </div>
      )}
      
      <!-- Back button with animation -->
      <div class="text-center">
        <a href="/" class="inline-block px-6 py-3 bg-gradient-to-r from-green-500 to-teal-500 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:translate-y-[-2px]">
          <span class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to Home
          </span>
        </a>
      </div>
    </div>
  </div>
</Layout>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />

<!-- Leaflet JavaScript -->
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" 
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" 
        crossorigin=""></script>

<script define:vars={{ lat, lon, locationName, countryName, weatherData, apiKey, isLoading }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Store API key in sessionStorage for persistence across page navigations
    if (apiKey) {
      sessionStorage.setItem('weatherApiKey', apiKey);
    }
    
    // Get API key from sessionStorage if not available from server
    const key = apiKey || sessionStorage.getItem('weatherApiKey');
    
    // Check if we have a stored city
    const storedCity = localStorage.getItem('weatherAppCurrentCity');
    
    if (storedCity) {
      // Fetch weather data for the stored city
      fetchCityWeather(storedCity);
    } else {
      // If no stored city and we're in loading state, show message
      if (isLoading) {
        const mapContainer = document.getElementById('weather-map');
        // Map container already has loading content from server-side
      }
    }
    
    // Function to fetch weather for a specific city
    async function fetchCityWeather(city) {
      try {
        const response = await fetch(
          `https://api.weatherapi.com/v1/current.json?key=${key}&q=${encodeURIComponent(city)}&aqi=no`
        );
        
        if (!response.ok) {
          throw new Error(`Error fetching weather for ${city}`);
        }
        
        const data = await response.json();
        
        // Update the map with the new location
        updateMap(data);
        
        // Update the page title and heading
        document.querySelector('h1').innerHTML = `<span class="text-transparent bg-clip-text bg-gradient-to-r from-green-600 to-teal-700">${data.location.name}, ${data.location.country}</span>`;
        
        // Update the weather info section
        const weatherInfo = document.querySelector('.backdrop-blur-sm.bg-white\\/40.p-6');
        if (weatherInfo && data.current) {
          // Clear any "loading" or placeholder content
          weatherInfo.innerHTML = `
            <h2 class="text-xl font-semibold mb-6 text-green-800 flex items-center">
              <span class="mr-2">Current Weather in ${data.location.name}, ${data.location.country}</span>
              <img src="${data.current.condition.icon}" alt="${data.current.condition.text}" class="w-10 h-10 animate-bounce-slow" />
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div class="text-center p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-xl shadow-inner transform transition-all duration-300 hover:translate-y-[-5px]">
                <p class="text-sm text-green-700 font-medium">Temperature</p>
                <p class="text-3xl font-bold text-green-600">${data.current.temp_c}°C</p>
              </div>
              <div class="text-center p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-xl shadow-inner transform transition-all duration-300 hover:translate-y-[-5px]">
                <p class="text-sm text-green-700 font-medium">Condition</p>
                <p class="text-xl font-medium text-green-800">${data.current.condition.text}</p>
              </div>
              <div class="text-center p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-xl shadow-inner transform transition-all duration-300 hover:translate-y-[-5px]">
                <p class="text-sm text-green-700 font-medium">Wind</p>
                <p class="text-xl font-medium text-green-800">${data.current.wind_kph} km/h</p>
              </div>
            </div>
          `;
        }
      } catch (error) {
        console.error("Error updating map with stored city:", error);
      }
    }
    
    function updateMap(data) {
      // Remove existing map if any
      const mapContainer = document.getElementById('weather-map');
      mapContainer.innerHTML = ''; // Clear loading message if present
      
      if (mapContainer._leaflet_id) {
        mapContainer._leaflet_id = null;
      }
      
      // Initialize the map with new coordinates
      const map = L.map('weather-map').setView([data.location.lat, data.location.lon], 10);
      
      // Add a custom styled map tiles
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        className: 'desaturated-map' // Apply custom styling
      }).addTo(map);
      
      // Create a custom icon for the weather marker
      const weatherIcon = L.divIcon({
        html: `<div class="weather-marker">
                <img src="${data.current.condition.icon}" alt="${data.current.condition.text}" width="50" height="50">
                <span class="temp">${data.current.temp_c}°C</span>
              </div>`,
        className: 'weather-icon-marker',
        iconSize: [70, 70],
        iconAnchor: [35, 35]
      });
      
      // Add a marker at the location with the weather icon
      const marker = L.marker([data.location.lat, data.location.lon], { icon: weatherIcon }).addTo(map);
      
      // Add a popup with weather information
      marker.bindPopup(`
        <div class="weather-popup">
          <h3>${data.location.name}, ${data.location.country}</h3>
          <p><strong>${data.current.condition.text}</strong></p>
          <p>Temperature: ${data.current.temp_c}°C</p>
          <p>Feels like: ${data.current.feelslike_c}°C</p>
          <p>Humidity: ${data.current.humidity}%</p>
          <p>Wind: ${data.current.wind_kph} km/h</p>
        </div>
      `).openPopup();
      
      // Add a pulsing circle animation around the marker
      const pulsingCircle = L.circle([data.location.lat, data.location.lon], {
        radius: 2000,
        color: '#4ade80',
        fillColor: '#4ade80',
        fillOpacity: 0.2,
        weight: 2,
        className: 'pulsing-circle'
      }).addTo(map);
    }
  });
</script>