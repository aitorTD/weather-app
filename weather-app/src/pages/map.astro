---
import Layout from "../layouts/Layout.astro";
import { Image } from 'astro:assets';

const title = "Weather App Map";
const apiKey = process.env.WEATHER_API_KEY;

// Check if there's a stored city in localStorage (client-side only)
// For server-side rendering, we'll use a loading state
let locationToUse = null;
let lat = null;
let lon = null;
let locationName = null;
let countryName = null;
let weatherData = null;
let isLoading = true;

// Only fetch data server-side if we have a specific city to show
if (locationToUse) {
  try {
    const response = await fetch(
      `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${encodeURIComponent(locationToUse)}&aqi=no`
    );
    
    if (response.ok) {
      const data = await response.json();
      lat = data.location.lat;
      lon = data.location.lon;
      locationName = data.location.name;
      countryName = data.location.country;
      weatherData = data.current;
      isLoading = false;
    }
  } catch (error) {
    console.error("Error fetching weather data:", error);
  }
}
---

<Layout {title}>
  <div class="container mx-auto px-4 py-6">
    <h1 class="text-3xl font-bold mb-6 text-center text-gray-900">
      {isLoading ? "Mapa del Tiempo" : `Mapa del Tiempo: ${locationName}, ${countryName}`}
    </h1>
    
    <!-- Map container -->
    <div id="weather-map" class="h-[500px] w-full rounded-xl shadow-lg mb-6">
      {isLoading && (
        <div class="flex items-center justify-center h-full bg-gray-100 rounded-xl">
          <div class="text-center">
            <div class="inline-block animate-spin mb-4 text-4xl">↻</div>
            <p class="text-xl text-gray-600">Cargando mapa...</p>
            <p class="text-gray-500 mt-2">Por favor, busca una ciudad para ver el clima.</p>
          </div>
        </div>
      )}
    </div>
    
    <!-- Weather info for the selected location -->
    {weatherData ? (
      <div class="bg-white p-6 rounded-xl shadow-md mb-6">
        <h2 class="text-xl font-semibold mb-4 text-gray-900 flex items-center">
          Clima actual en {locationName}, {countryName}
          <img src={weatherData.condition.icon} alt={weatherData.condition.text} class="ml-2 w-10 h-10" />
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div class="text-center p-3 bg-blue-50 rounded-lg">
            <p class="text-sm text-gray-500">Temperatura</p>
            <p class="text-2xl font-bold text-blue-600">{weatherData.temp_c}°C</p>
          </div>
          <div class="text-center p-3 bg-blue-50 rounded-lg">
            <p class="text-sm text-gray-500">Condición</p>
            <p class="text-lg font-medium text-gray-800">{weatherData.condition.text}</p>
          </div>
          <div class="text-center p-3 bg-blue-50 rounded-lg">
            <p class="text-sm text-gray-500">Viento</p>
            <p class="text-lg font-medium text-gray-800">{weatherData.wind_kph} km/h</p>
          </div>
        </div>
      </div>
    ) : (
      <div class="bg-white p-6 rounded-xl shadow-md mb-6 text-center">
        <h2 class="text-xl font-semibold mb-4 text-gray-900">
          Información del clima
        </h2>
        <p class="text-gray-600">Busca una ciudad para ver la información del clima.</p>
      </div>
    )}
    
    <div class="text-center">
      <a href="/" class="inline-block px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
        Volver a la página principal
      </a>
    </div>
  </div>
</Layout>

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />

<!-- Leaflet JavaScript -->
<script is:inline src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" 
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" 
        crossorigin=""></script>

<script define:vars={{ lat, lon, locationName, countryName, weatherData, apiKey, isLoading }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Store API key in sessionStorage for persistence across page navigations
    if (apiKey) {
      sessionStorage.setItem('weatherApiKey', apiKey);
    }
    
    // Get API key from sessionStorage if not available from server
    const key = apiKey || sessionStorage.getItem('weatherApiKey');
    
    // Check if we have a stored city
    const storedCity = localStorage.getItem('weatherAppCurrentCity');
    
    if (storedCity) {
      // Fetch weather data for the stored city
      fetchCityWeather(storedCity);
    } else {
      // If no stored city and we're in loading state, show message
      if (isLoading) {
        const mapContainer = document.getElementById('weather-map');
        // Map container already has loading content from server-side
      }
    }
    
    // Function to fetch weather for a specific city
    async function fetchCityWeather(city) {
      try {
        const response = await fetch(
          `https://api.weatherapi.com/v1/current.json?key=${key}&q=${encodeURIComponent(city)}&aqi=no`
        );
        
        if (!response.ok) {
          throw new Error(`Error fetching weather for ${city}`);
        }
        
        const data = await response.json();
        
        // Update the map with the new location
        updateMap(data);
        
        // Update the page title and heading
        document.querySelector('h1').textContent = `Mapa del Tiempo: ${data.location.name}, ${data.location.country}`;
        
        // Update the weather info section
        const weatherInfo = document.querySelector('.bg-white.p-6.rounded-xl.shadow-md.mb-6');
        if (weatherInfo && data.current) {
          // Clear any "loading" or placeholder content
          weatherInfo.innerHTML = `
            <h2 class="text-xl font-semibold mb-4 text-gray-900 flex items-center">
              Clima actual en ${data.location.name}, ${data.location.country}
              <img src="${data.current.condition.icon}" alt="${data.current.condition.text}" class="ml-2 w-10 h-10" />
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="text-center p-3 bg-blue-50 rounded-lg">
                <p class="text-sm text-gray-500">Temperatura</p>
                <p class="text-2xl font-bold text-blue-600">${data.current.temp_c}°C</p>
              </div>
              <div class="text-center p-3 bg-blue-50 rounded-lg">
                <p class="text-sm text-gray-500">Condición</p>
                <p class="text-lg font-medium text-gray-800">${data.current.condition.text}</p>
              </div>
              <div class="text-center p-3 bg-blue-50 rounded-lg">
                <p class="text-sm text-gray-500">Viento</p>
                <p class="text-lg font-medium text-gray-800">${data.current.wind_kph} km/h</p>
              </div>
            </div>
          `;
        }
      } catch (error) {
        console.error("Error updating map with stored city:", error);
      }
    }
    
    function updateMap(data) {
      // Remove existing map if any
      const mapContainer = document.getElementById('weather-map');
      mapContainer.innerHTML = ''; // Clear loading message if present
      
      if (mapContainer._leaflet_id) {
        mapContainer._leaflet_id = null;
      }
      
      // Initialize the map with new coordinates
      const map = L.map('weather-map').setView([data.location.lat, data.location.lon], 10);
      
      // Add the OpenStreetMap tiles
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);
      
      // Create a custom icon for the weather marker
      const weatherIcon = L.divIcon({
        html: `<div class="weather-marker">
                <img src="${data.current.condition.icon}" alt="${data.current.condition.text}" width="50" height="50">
                <span class="temp">${data.current.temp_c}°C</span>
              </div>`,
        className: 'weather-icon-marker',
        iconSize: [60, 60],
        iconAnchor: [30, 30]
      });
      
      // Add a marker at the location with the weather icon
      const marker = L.marker([data.location.lat, data.location.lon], { icon: weatherIcon }).addTo(map);
      
      // Add a popup with weather information
      marker.bindPopup(`
        <div class="weather-popup">
          <h3>${data.location.name}, ${data.location.country}</h3>
          <p><strong>${data.current.condition.text}</strong></p>
          <p>Temperatura: ${data.current.temp_c}°C</p>
          <p>Sensación térmica: ${data.current.feelslike_c}°C</p>
          <p>Humedad: ${data.current.humidity}%</p>
          <p>Viento: ${data.current.wind_kph} km/h</p>
        </div>
      `).openPopup();
    }
  });
</script>

<style>
  .weather-icon-marker {
    background: none;
    border: none;
  }
  
  .weather-marker {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    padding: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }
  
  .weather-marker img {
    width: 40px;
    height: 40px;
  }
  
  .weather-marker .temp {
    font-weight: bold;
    background-color: #3b82f6;
    color: white;
    padding: 2px 6px;
    border-radius: 10px;
    font-size: 12px;
    margin-top: -5px;
  }
  
  .weather-popup h3 {
    font-weight: bold;
    margin-bottom: 5px;
  }
  
  .weather-popup p {
    margin: 3px 0;
  }
  
  .search-control span {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 30px;
    height: 30px;
    background: white;
    cursor: pointer;
  }
</style>