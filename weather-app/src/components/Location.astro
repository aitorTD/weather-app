---
import { preprocess } from "astro:schema";
import WeatherCard from "../components/Components.astro";

// Get the search query from URL parameters (if any)
const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get("location") || "Granada";

// Add loading state variables
let location, weatherData, error;

try {
  const result = await fetchWeatherData(searchQuery);
  location = result.location;
  weatherData = result.weatherData;
} catch (e) {
  error = `No se encontró información para "${searchQuery}". Por favor, intenta con otra ciudad.`;
  // Fallback to Granada if there's an error
  const result = await fetchWeatherData("Granada");
  location = result.location;
  weatherData = result.weatherData;
}

async function fetchWeatherData(query = "Granada") {
  const key = process.env.WEATHER_API_KEY;
  const response = await fetch(
    `https://api.weatherapi.com/v1/current.json?key=${key}&q=${query}&aqi=no`
  );

  if (!response.ok) {
    throw new Error(`Error al buscar "${query}"`);
  }

  const data = await response.json();
  return {
    location: data.location.name,
    weatherData: data.current,
  };
}

const weatherItems = [
  { label: "Temperatura", key: "temp_c", unit: " °C" },
  { label: "Sensación Térmica", key: "feelslike_c", unit: " °C" },
  { label: "Humedad", key: "humidity", unit: " %" },
  { label: "Precipitaciones", key: "precip_mm", unit: " mm" },
  { label: "Viento", key: "wind_kph", unit: " km/h" },
  { label: "Presión", key: "pressure_mb", unit: " mb" },
  { label: "Visibilidad", key: "vis_km", unit: " km" },
];

// API key for client-side use (consider using environment variables properly in production)
const clientApiKey = process.env.WEATHER_API_KEY;

// Format the last updated time
const lastUpdated = weatherData.last_updated ? new Date(weatherData.last_updated).toLocaleString('es-ES') : '';
---

<div class="weather-app">
  <form method="GET" action="" class="mb-6 relative">
    <div class="flex">
      <input
        type="text"
        name="location"
        id="location-search"
        placeholder="Buscar ciudad..."
        value={searchQuery}
        autocomplete="off"
        class="flex-grow px-4 py-2 border border-gray-300 rounded-l focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <button
        type="submit"
        class="bg-blue-500 text-white px-4 py-2 rounded-r hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        Buscar
      </button>
    </div>
    <ul
      id="autocomplete-results"
      class="absolute z-10 w-full bg-white border border-gray-300 rounded-b shadow-lg max-h-60 overflow-y-auto hidden"
    >
    </ul>
  </form>

  {
    error && (
      <div
        class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6"
        role="alert"
      >
        <p>{error}</p>
      </div>
    )
  }

  <h2 class="text-3xl font-semibold">
    Clima en {location}
    <img src={weatherData.condition.icon} alt={weatherData.condition.text} />
  </h2>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
    {
      weatherItems.map((item) => (
        <WeatherCard
          title={item.label}
          value={`${weatherData[item.key]} ${item.unit}`}
        />
      ))
    }
  </div>
</div>

<script>
  // Add loading indicators for search and autocomplete
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector("form");
    const searchButton = form?.querySelector('button[type="submit"]');
    const searchButtonText = searchButton?.textContent || "Buscar";

    form?.addEventListener("submit", () => {
      if (searchButton) {
        searchButton.innerHTML =
          '<span class="inline-block animate-spin mr-2">↻</span> Buscando...';
      }
      if (searchButton instanceof HTMLButtonElement)
        searchButton.disabled = true;
    });
  });
</script>

<script define:vars={{ clientApiKey }}>
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("location-search");
    const resultsContainer = document.getElementById("autocomplete-results");
    let debounceTimer;

    searchInput.addEventListener("input", function () {
      clearTimeout(debounceTimer);

      if (this.value.length < 2) {
        resultsContainer.innerHTML = "";
        resultsContainer.classList.add("hidden");
        return;
      }

      debounceTimer = setTimeout(() => {
        fetchCitySuggestions(this.value);
      }, 300);
    });

    // Hide results when clicking outside
    document.addEventListener("click", (e) => {
      if (e.target !== searchInput && e.target !== resultsContainer) {
        resultsContainer.classList.add("hidden");
      }
    });

    // Show results when input is focused
    searchInput.addEventListener("focus", function () {
      if (this.value.length >= 2 && resultsContainer.children.length > 0) {
        resultsContainer.classList.remove("hidden");
      }
    });

    async function fetchCitySuggestions(query) {
      try {
        const response = await fetch(
          `https://api.weatherapi.com/v1/search.json?key=${clientApiKey}&q=${encodeURIComponent(query)}`
        );

        if (!response.ok) {
          throw new Error("Error fetching city suggestions");
        }

        const cities = await response.json();
        displayCitySuggestions(cities);
      } catch (error) {
        console.error("Error:", error);
      }
    }

    function displayCitySuggestions(cities) {
      resultsContainer.innerHTML = "";

      if (cities.length === 0) {
        resultsContainer.classList.add("hidden");
        return;
      }

      cities.forEach((city) => {
        const li = document.createElement("li");
        li.className = "px-4 py-2 hover:bg-gray-100 cursor-pointer";
        li.textContent = `${city.name}, ${city.region}, ${city.country}`;

        li.addEventListener("click", () => {
          searchInput.value = city.name;
          resultsContainer.classList.add("hidden");
        });

        resultsContainer.appendChild(li);
      });

      resultsContainer.classList.remove("hidden");
    }
  });
</script>

<style>
  /* Make the weather app container responsive with proper padding */
  .weather-app {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  /* Improve autocomplete on mobile */
  @media (max-width: 640px) {
    #autocomplete-results {
      max-height: 40vh;
    }
  }
  
  /* Existing styles */
  #autocomplete-results li:not(:last-child) {
    border-bottom: 1px solid #e2e8f0;
  }
</style>
