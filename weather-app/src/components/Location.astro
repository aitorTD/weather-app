---
import { Image } from 'astro:assets';
import '../styles/styles.css';

const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get("location") || "";

let location: string | undefined;
let weatherData: {
  temp_c: number;
  feelslike_c: number;
  humidity: number;
  precip_mm: number;
  wind_kph: number;
  pressure_mb: number;
  vis_km: number;
  condition: {
    icon: string;
    text: string;
  };
  last_updated: string;
} | undefined;
let error: string | undefined;
let country: string | undefined;
let isLoading = !searchQuery;

if (!isLoading) {
  try {
    const result = await fetchWeatherData(searchQuery);
    location = result.location;
    weatherData = result.weatherData;
    country = result.country;
  } catch (e) {
    error = `No se encontró información para "${searchQuery}". Por favor, intenta con otra ciudad.`;
    isLoading = true;
  }
}

async function fetchWeatherData(query: string) {
  const key = process.env.WEATHER_API_KEY;
  const response = await fetch(
    `https://api.weatherapi.com/v1/current.json?key=${key}&q=${query}&aqi=no`
  );

  if (!response.ok) {
    throw new Error(`Error al buscar "${query}"`);
  }

  const data = await response.json();
  return {
    location: data.location.name,
    country: data.location.country,
    weatherData: data.current,
  };
}

const weatherItems = [
  { label: "Temperatura", key: "temp_c", unit: " °C" },
  { label: "Sensación Térmica", key: "feelslike_c", unit: " °C" },
  { label: "Humedad", key: "humidity", unit: " %" },
  { label: "Precipitaciones", key: "precip_mm", unit: " mm" },
  { label: "Viento", key: "wind_kph", unit: " km/h" },
  { label: "Presión", key: "pressure_mb", unit: " mb" },
  { label: "Visibilidad", key: "vis_km", unit: " km" },
];

const clientApiKey = process.env.WEATHER_API_KEY;
const lastUpdated = weatherData?.last_updated ? new Date(weatherData.last_updated).toLocaleString('es-ES') : '';
---

<div class="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4 md:p-8">
  <div class="max-w-4xl mx-auto">

    <!-- Search Form -->
    <div class="bg-white/80 backdrop-blur-lg rounded-2xl shadow-lg p-6 mb-8 transition-all duration-300 hover:shadow-xl">
      <form method="GET" action="" class="mb-4 relative">
        <div class="flex shadow-md rounded-full overflow-hidden border border-green-100">
          <input
            type="text"
            name="location"
            id="location-search"
            placeholder="Buscar ciudad..."
            value={searchQuery}
            autocomplete="off"
            class="flex-grow px-6 py-4 border-0 focus:outline-none focus:ring-2 focus:ring-green-400 bg-white/90"
          />
          <button
            type="submit"
            id="search-button"
            class="bg-gradient-to-r from-green-400 to-blue-500 text-white px-8 py-4 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-green-400 transition-all duration-200"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        <ul
          id="autocomplete-results"
          class="absolute z-10 w-full bg-white/95 backdrop-blur-sm border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto hidden mt-2"
        ></ul>
      </form>

      {
        error && (
          <div
            id="error-container"
            class="bg-red-50 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-lg animate-fadeIn"
            role="alert"
          >
            <p>{error}</p>
          </div>
        )
      }
    </div>

    <!-- Weather Content -->
    <div class="bg-white/80 backdrop-blur-lg rounded-2xl shadow-lg p-6 transition-all duration-300 hover:shadow-xl">
      <div class="text-center mb-8">
        {isLoading ? (
          <h2 class="text-3xl font-bold text-center mb-2 text-gray-800" id="location-heading">
            Buscando información del clima...
          </h2>
        ) : (
          <div class="space-y-2">
            <h2 class="text-3xl font-bold flex items-center justify-center gap-3 text-center mb-2 bg-gradient-to-r from-green-500 to-blue-600 bg-clip-text text-transparent" id="location-heading">
              <span>Clima en {location}, {country}</span>
              <img id="weather-icon" src={weatherData?.condition.icon || ''} alt={weatherData?.condition.text || ''} width="40" height="40" class="inline-block w-12 h-12 align-middle" />
            </h2>
            <p class="text-xl text-gray-700">{weatherData?.condition.text}</p>
          </div>
        )}
        
        {lastUpdated && (
          <p id="last-updated" class="text-sm text-gray-500 mt-2">Última actualización: {lastUpdated}</p>
        )}
      </div>
      
      <div class="flex items-center justify-center gap-4 mb-8">
        <button id="unit-toggle" class="px-6 py-2 bg-gradient-to-r from-green-400 to-blue-500 text-white rounded-full hover:opacity-90 transition-all duration-200 font-medium shadow-md">
          °C / °F
        </button>
      </div>
      
      <div id="weather-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        {isLoading ? (
          <div class="col-span-full text-center py-10">
            <div class="inline-block animate-bounce text-5xl mb-4 text-green-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16" viewBox="0 0 24 24" fill="none">
                <path d="M12 2v2M12 20v2M4.93 4.93l1.41 1.41M17.66 17.66l1.41 1.41M2 12h2M20 12h2M6.34 17.66l-1.41 1.41M19.07 4.93l-1.41 1.41" stroke="url(#loading-gradient)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <defs>
                    <linearGradient id="loading-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                      <stop offset="0%" stop-color="#4ade80" />
                      <stop offset="100%" stop-color="#3b82f6" />
                    </linearGradient>
                  </defs>
                </path>
              </svg>
            </div>
            <p class="text-xl text-gray-600">Cargando datos del clima...</p>
            <p class="text-gray-500 mt-2">Por favor, busca una ciudad para ver el clima.</p>
          </div>
        ) : (
          weatherItems.map((item) => (
            <div class="bg-gradient-to-br from-white to-green-50/70 p-6 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border-0 backdrop-blur-sm relative overflow-hidden group">
              <div class="absolute inset-0 bg-gradient-to-br from-green-400/5 to-blue-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div class="relative z-10">
                <h3 class="text-sm uppercase tracking-wider font-semibold text-green-600 mb-1">{item.label}</h3>
                <p class="text-3xl font-bold mt-1 bg-gradient-to-r from-green-500 to-blue-500 bg-clip-text text-transparent flex items-baseline">
                  {weatherData && weatherData[item.key as keyof typeof weatherData]}
                  <span class="text-lg ml-1 opacity-80">{item.unit}</span>
                </p>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  </div>
</div>

<script define:vars={{ clientApiKey, weatherItems }}>
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("location-search");
    const resultsContainer = document.getElementById("autocomplete-results");
    const form = document.querySelector("form");
    const searchButton = document.getElementById("search-button");
    const errorContainer = document.getElementById("error-container");
    const locationHeading = document.getElementById("location-heading");
    const weatherGrid = document.getElementById("weather-grid");
    const lastUpdatedElement = document.getElementById("last-updated");
    let debounceTimer;
    let errorTimeout;
    
    if (clientApiKey) {
      sessionStorage.setItem('weatherApiKey', clientApiKey);
    }
    
    const apiKey = clientApiKey || sessionStorage.getItem('weatherApiKey');
    
    if (errorContainer) {
      errorTimeout = setTimeout(() => {
        errorContainer.style.opacity = '0';
        setTimeout(() => {
          errorContainer.style.display = 'none';
        }, 300);
      }, 5000);
    }
    
    initGeolocation();
    setupEventListeners();
    
    function initGeolocation() {
      const url = new URL(window.location);
      const hasLocationParam = url.searchParams.has("location");
      const lastSearch = localStorage.getItem('weatherAppLastSearch');
      
      if (hasLocationParam) {
        return;
      }
      
      if (lastSearch) {
        searchInput.value = lastSearch;
        handleFormSubmit(new Event('submit'));
        return;
      }
      
      if (!hasLocationParam && !lastSearch) {
        showLoadingState();
      }
      
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          handleGeolocationSuccess,
          error => {
            console.error("Geolocation error:", error);
          }
        );
      }
    }
    
    function showLoadingState() {
      if (!weatherGrid.querySelector('.col-span-full')) {
        weatherGrid.innerHTML = `
          <div class="col-span-full text-center py-10">
            <div class="inline-block animate-spin text-4xl mb-4">↻</div>
            <p class="text-xl text-gray-600">Cargando datos del clima...</p>
            <p class="text-gray-500 mt-2">Por favor, busca una ciudad para ver el clima.</p>
          </div>
        `;
      }
      
      if (locationHeading) {
        locationHeading.innerHTML = 'Buscando información del clima...';
      }
    }
    
    async function handleGeolocationSuccess(position) {
      const { latitude, longitude } = position.coords;
      
      try {
        if (searchButton) {
          searchButton.innerHTML = '<span class="inline-block animate-spin mr-2">↻</span> Buscando...';
          searchButton.disabled = true;
        }
        
        const response = await fetch(
          `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${latitude},${longitude}&aqi=no`
        );
        
        if (!response.ok) throw new Error("Error fetching weather for your location");
        
        const data = await response.json();
        updateWeatherUI(data);
        
        if (searchInput) searchInput.value = data.location.name;
        
        localStorage.setItem('weatherAppCurrentCity', data.location.name);
      } catch (error) {
        console.error("Error getting weather for user location:", error);
      } finally {
        if (searchButton) {
          searchButton.innerHTML = "Buscar";
          searchButton.disabled = false;
        }
      }
    }
    
    function setupEventListeners() {
      searchInput.addEventListener("input", handleSearchInput);
      document.addEventListener("click", handleDocumentClick);
      searchInput.addEventListener("focus", handleSearchFocus);
      form.addEventListener("submit", handleFormSubmit);
    }
    
    function handleSearchInput() {
      clearTimeout(debounceTimer);

      if (this.value.length < 2) {
        resultsContainer.innerHTML = "";
        resultsContainer.classList.add("hidden");
        return;
      }

      debounceTimer = setTimeout(() => fetchCitySuggestions(this.value), 300);
    }
    
    function handleDocumentClick(e) {
      if (e.target !== searchInput && e.target !== resultsContainer) {
        resultsContainer.classList.add("hidden");
      }
    }
    
    function handleSearchFocus() {
      if (this.value.length >= 2 && resultsContainer.children.length > 0) {
        resultsContainer.classList.remove("hidden");
      }
    }
    
    async function fetchCitySuggestions(query) {
      try {
        const key = apiKey;
        if (!key) {
          console.error("API key not available");
          return;
        }
        
        const response = await fetch(
          `https://api.weatherapi.com/v1/search.json?key=${key}&q=${encodeURIComponent(query)}`
        );

        if (!response.ok) throw new Error("Error fetching city suggestions");

        const cities = await response.json();
        displayCitySuggestions(cities);
      } catch (error) {
        console.error("Error:", error);
      }
    }

    function displayCitySuggestions(cities) {
      resultsContainer.innerHTML = "";

      if (cities.length === 0) {
        resultsContainer.classList.add("hidden");
        return;
      }

      cities.forEach((city) => {
        const li = document.createElement("li");
        li.className = "px-4 py-2 hover:bg-gray-100 cursor-pointer";
        li.textContent = `${city.name}, ${city.region}, ${city.country}`;

        li.addEventListener("click", () => {
          searchInput.value = city.name;
          resultsContainer.classList.add("hidden");
        });

        resultsContainer.appendChild(li);
      });

      resultsContainer.classList.remove("hidden");
    }
    
    async function handleFormSubmit(e) {
      e.preventDefault();
      
      if (errorTimeout) {
        clearTimeout(errorTimeout);
      }
      
      const query = searchInput.value.trim();
      if (!query) return;
      
      localStorage.setItem('weatherAppCurrentCity', query);
      
      searchButton.innerHTML = '<span class="inline-block animate-spin mr-2">↻</span> Buscando...';
      searchButton.disabled = true;
      
      try {
        const key = apiKey;
        if (!key) {
          throw new Error("API key not available. Please refresh the page.");
        }
        
        const response = await fetch(
          `https://api.weatherapi.com/v1/current.json?key=${key}&q=${encodeURIComponent(query)}&aqi=no`
        );
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error("API Error Response:", errorText);
          throw new Error(`No se encontró información para "${query}". Por favor, intenta con otra ciudad.`);
        }
        
        const data = await response.json();
        updateWeatherUI(data);
        
        // Hide any existing error container
        if (errorContainer) {
          errorContainer.style.display = "none";
        }
      } catch (error) {
        console.error("Search Error:", error);
        
        // Remove any existing error containers first
        const existingErrors = document.querySelectorAll('#error-container');
        existingErrors.forEach(el => el.remove());
        
        // Create a new error container
        const newErrorContainer = document.createElement("div");
        newErrorContainer.id = "error-container";
        newErrorContainer.className = "bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-r-lg transition-opacity duration-300";
        newErrorContainer.setAttribute("role", "alert");
        newErrorContainer.innerHTML = `<p>${error.message}</p>`;
        
        form.insertAdjacentElement("afterend", newErrorContainer);
        errorContainer = newErrorContainer;
        
        // Set timeout to hide the error after 5 seconds
        errorTimeout = setTimeout(() => {
          if (errorContainer) {
            errorContainer.style.opacity = '0';
            setTimeout(() => {
              errorContainer.style.display = 'none';
            }, 300);
          }
        }, 5000);
      } finally {
        searchButton.innerHTML = "Buscar";
        searchButton.disabled = false;
      }
    }
    
    function updateWeatherUI(data) {
      const locationName = data.location?.name || data.location;
      const countryName = data.location?.country || '';
      const currentData = data.current || data.weatherData || {};
      const conditionIcon = currentData.condition?.icon || "";
      const conditionText = currentData.condition?.text || "";
      
      const loadingElement = weatherGrid.querySelector('.col-span-full');
      if (loadingElement) {
        loadingElement.remove();
      }
      
      locationHeading.innerHTML = `<span>Clima en ${locationName}${countryName ? ', ' + countryName : ''}</span> <img id="weather-icon" src="${conditionIcon}" alt="${conditionText}" class="inline-block w-12 h-12 align-middle" />`;
      
      const lastUpdated = currentData.last_updated ? new Date(currentData.last_updated).toLocaleString('es-ES') : '';
      if (lastUpdatedElement) {
        lastUpdatedElement.textContent = `Última actualización: ${lastUpdated}`;
      }
      
      weatherGrid.innerHTML = '';
      weatherItems.forEach(item => {
        const card = document.createElement('div');
        card.className = 'bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 transform hover:-translate-y-1 transition-transform duration-200';
        card.setAttribute('data-item', item.key);
        
        if (item.key.includes('temp') || item.key.includes('feelslike')) {
          card.setAttribute('data-temp', currentData[item.key]);
        }
        
        card.innerHTML = `
          <h3 class="text-lg font-medium text-gray-900">${item.label}</h3>
          <p class="text-3xl font-bold mt-2 text-blue-600">${currentData[item.key]}${item.unit}</p>
        `;
        weatherGrid.appendChild(card);
      });
      
      saveToRecentSearches(locationName);
    }
    
    function saveToRecentSearches(locationName) {
      let recentSearches = JSON.parse(localStorage.getItem('weatherAppRecentSearches') || '[]');
      
      if (!recentSearches.includes(locationName)) {
        recentSearches.unshift(locationName);
        recentSearches = recentSearches.slice(0, 5);
        localStorage.setItem('weatherAppRecentSearches', JSON.stringify(recentSearches));
      }
      
      localStorage.setItem('weatherAppLastSearch', locationName);
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const unitToggle = document.getElementById('unit-toggle');
    let useMetric = true;
    
    if (unitToggle) {
      unitToggle.addEventListener('click', () => {
        useMetric = !useMetric;
        
        const tempCards = document.querySelectorAll('[data-temp]');
        tempCards.forEach(card => {
          const tempC = parseFloat(card.getAttribute('data-temp') || '0');
          const displayTemp = useMetric ? tempC : (tempC * 9/5) + 32;
          const unit = useMetric ? '°C' : '°F';
          
          const paragraph = card.querySelector('p');
          if (paragraph) {
            paragraph.textContent = `${displayTemp.toFixed(1)}${unit}`;
          }
        });
        
        unitToggle.textContent = useMetric ? '°C / °F' : '°F / °C';
      });
    }
  });
</script>