---
import { preprocess } from "astro:schema";
import WeatherCard from "../components/Components.astro";

const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get("location") || "";

let location, weatherData, error;

try {
  const result = await fetchWeatherData(searchQuery);
  location = result.location;
  weatherData = result.weatherData;
} catch (e) {
  error = `No se encontró información para "${searchQuery}". Por favor, intenta con otra ciudad.`;
  const result = await fetchWeatherData("Granada");
  location = result.location;
  weatherData = result.weatherData;
}

async function fetchWeatherData(query = "Granada") {
  const key = process.env.WEATHER_API_KEY;
  const response = await fetch(
    `https://api.weatherapi.com/v1/current.json?key=${key}&q=${query}&aqi=no`
  );

  if (!response.ok) {
    throw new Error(`Error al buscar "${query}"`);
  }

  const data = await response.json();
  return {
    location: data.location.name,
    weatherData: data.current,
  };
}

const weatherItems = [
  { label: "Temperatura", key: "temp_c", unit: " °C" },
  { label: "Sensación Térmica", key: "feelslike_c", unit: " °C" },
  { label: "Humedad", key: "humidity", unit: " %" },
  { label: "Precipitaciones", key: "precip_mm", unit: " mm" },
  { label: "Viento", key: "wind_kph", unit: " km/h" },
  { label: "Presión", key: "pressure_mb", unit: " mb" },
  { label: "Visibilidad", key: "vis_km", unit: " km" },
];

const clientApiKey = process.env.WEATHER_API_KEY;
const lastUpdated = weatherData.last_updated ? new Date(weatherData.last_updated).toLocaleString('es-ES') : '';
---

<div class="weather-app bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen p-6 transition-colors duration-300">
  <div class="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-6 mb-8">
    <form method="GET" action="" class="mb-8 relative">
      <div class="flex shadow-md rounded-lg overflow-hidden">
        <input
          type="text"
          name="location"
          id="location-search"
          placeholder="Buscar ciudad..."
          value={searchQuery}
          autocomplete="off"
          class="flex-grow px-4 py-3 border-0 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button
          type="submit"
          id="search-button"
          class="bg-blue-500 text-white px-6 py-3 hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Buscar
        </button>
      </div>
      <ul
        id="autocomplete-results"
        class="absolute z-10 w-full bg-white border border-gray-300 rounded-b-lg shadow-lg max-h-60 overflow-y-auto hidden"
      ></ul>
    </form>

    {
      error && (
        <div
          id="error-container"
          class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6 rounded-r-lg"
          role="alert"
        >
          <p>{error}</p>
        </div>
      )
    }

    <div class="text-center mb-8">
      <h2 class="text-3xl font-bold flex items-center justify-center gap-2 text-center mb-2 text-gray-900" id="location-heading">
        Clima en {location}
        <img id="weather-icon" src={weatherData.condition.icon} alt={weatherData.condition.text} class="ml-2 w-12 h-12" />
      </h2>
      
      {lastUpdated && (
        <p id="last-updated" class="text-sm text-gray-500">Última actualización: {lastUpdated}</p>
      )}
    </div>
    
    <div class="flex items-center justify-center gap-4 mb-8">
      <button id="unit-toggle" class="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors duration-200 font-medium">
        °C / °F
      </button>
    </div>
    
    <div id="weather-grid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {
        weatherItems.map((item) => (
          <div class="bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 transform hover:-translate-y-1 transition-transform duration-200">
            <h3 class="text-lg font-medium text-gray-900">{item.label}</h3>
            <p class="text-3xl font-bold mt-2 text-blue-600">{weatherData[item.key]}{item.unit}</p>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script define:vars={{ clientApiKey, weatherItems }}>
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("location-search");
    const resultsContainer = document.getElementById("autocomplete-results");
    const form = document.querySelector("form");
    const searchButton = document.getElementById("search-button");
    const errorContainer = document.getElementById("error-container");
    const locationHeading = document.getElementById("location-heading");
    const weatherGrid = document.getElementById("weather-grid");
    const lastUpdatedElement = document.getElementById("last-updated");
    let debounceTimer;
    
    initGeolocation();
    setupEventListeners();
    
    function initGeolocation() {
      const url = new URL(window.location);
      const hasLocationParam = url.searchParams.has("location");
      
      if (!hasLocationParam && navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          handleGeolocationSuccess,
          error => console.error("Geolocation error:", error)
        );
      }
    }
    
    async function handleGeolocationSuccess(position) {
      const { latitude, longitude } = position.coords;
      
      try {
        if (searchButton) {
          searchButton.innerHTML = '<span class="inline-block animate-spin mr-2">↻</span> Buscando...';
          searchButton.disabled = true;
        }
        
        const response = await fetch(
          `https://api.weatherapi.com/v1/current.json?key=${clientApiKey}&q=${latitude},${longitude}&aqi=no`
        );
        
        if (!response.ok) throw new Error("Error fetching weather for your location");
        
        const data = await response.json();
        updateWeatherUI(data);
        
        if (searchInput) searchInput.value = data.location.name;
        
        const url = new URL(window.location);
        url.searchParams.set("location", data.location.name);
        window.history.pushState({}, "", url);
      } catch (error) {
        console.error("Error getting weather for user location:", error);
      } finally {
        if (searchButton) {
          searchButton.innerHTML = "Buscar";
          searchButton.disabled = false;
        }
      }
    }
    
    function setupEventListeners() {
      searchInput.addEventListener("input", handleSearchInput);
      document.addEventListener("click", handleDocumentClick);
      searchInput.addEventListener("focus", handleSearchFocus);
      form.addEventListener("submit", handleFormSubmit);
    }
    
    function handleSearchInput() {
      clearTimeout(debounceTimer);

      if (this.value.length < 2) {
        resultsContainer.innerHTML = "";
        resultsContainer.classList.add("hidden");
        return;
      }

      debounceTimer = setTimeout(() => fetchCitySuggestions(this.value), 300);
    }
    
    function handleDocumentClick(e) {
      if (e.target !== searchInput && e.target !== resultsContainer) {
        resultsContainer.classList.add("hidden");
      }
    }
    
    function handleSearchFocus() {
      if (this.value.length >= 2 && resultsContainer.children.length > 0) {
        resultsContainer.classList.remove("hidden");
      }
    }
    
    async function fetchCitySuggestions(query) {
      try {
        const response = await fetch(
          `https://api.weatherapi.com/v1/search.json?key=${clientApiKey}&q=${encodeURIComponent(query)}`
        );

        if (!response.ok) throw new Error("Error fetching city suggestions");

        const cities = await response.json();
        displayCitySuggestions(cities);
      } catch (error) {
        console.error("Error:", error);
      }
    }

    function displayCitySuggestions(cities) {
      resultsContainer.innerHTML = "";

      if (cities.length === 0) {
        resultsContainer.classList.add("hidden");
        return;
      }

      cities.forEach((city) => {
        const li = document.createElement("li");
        li.className = "px-4 py-2 hover:bg-gray-100 cursor-pointer";
        li.textContent = `${city.name}, ${city.region}, ${city.country}`;

        li.addEventListener("click", () => {
          searchInput.value = city.name;
          resultsContainer.classList.add("hidden");
        });

        resultsContainer.appendChild(li);
      });

      resultsContainer.classList.remove("hidden");
    }
    
    async function handleFormSubmit(e) {
      e.preventDefault();
      
      const query = searchInput.value.trim();
      if (!query) return;
      
      const url = new URL(window.location);
      url.searchParams.set("location", query);
      window.history.pushState({}, "", url);
      
      searchButton.innerHTML = '<span class="inline-block animate-spin mr-2">↻</span> Buscando...';
      searchButton.disabled = true;
      
      try {
        const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${clientApiKey}&q=${encodeURIComponent(query)}&aqi=no`);
        
        if (!response.ok) throw new Error(`Error al buscar "${query}"`);
        
        const data = await response.json();
        updateWeatherUI(data, query);
        
        if (errorContainer) errorContainer.style.display = "none";
      } catch (error) {
        console.error("Error:", error);
        
        if (errorContainer) {
          errorContainer.style.display = "block";
          errorContainer.querySelector("p").textContent = `No se encontró información para "${query}". Por favor, intenta con otra ciudad.`;
          
          // Auto-dismiss error after 4 seconds
          setTimeout(() => {
            errorContainer.style.opacity = "0";
            setTimeout(() => {
              errorContainer.style.display = "none";
              errorContainer.style.opacity = "1";
            }, 300);
          }, 4000);
        } else {
          // Create error container if it doesn't exist
          const newErrorContainer = document.createElement("div");
          newErrorContainer.id = "error-container";
          newErrorContainer.className = "bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6";
          newErrorContainer.setAttribute("role", "alert");
          newErrorContainer.innerHTML = `<p>No se encontró información para "${query}". Por favor, intenta con otra ciudad.</p>`;
          
          form.insertAdjacentElement("afterend", newErrorContainer);
          
          // Auto-dismiss error after 4 seconds
          setTimeout(() => {
            newErrorContainer.style.opacity = "0";
            setTimeout(() => {
              newErrorContainer.style.display = "none";
              newErrorContainer.style.opacity = "1";
            }, 300);
          }, 4000);
        }
      } finally {
        searchButton.innerHTML = "Buscar";
        searchButton.disabled = false;
      }
    }
    
    function updateWeatherUI(data) {
      // Update with improved styling
      locationHeading.innerHTML = `Clima en ${data.location.name} <img id="weather-icon" src="${data.current.condition.icon}" alt="${data.current.condition.text}" class="ml-2 w-12 h-12" />`;
      
      const lastUpdated = data.current.last_updated ? new Date(data.current.last_updated).toLocaleString('es-ES') : '';
      if (lastUpdatedElement) {
        lastUpdatedElement.textContent = `Última actualización: ${lastUpdated}`;
      }
      
      weatherGrid.innerHTML = '';
      weatherItems.forEach(item => {
        const card = document.createElement('div');
        card.className = 'bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-200 transform hover:-translate-y-1 transition-transform duration-200';
        card.setAttribute('data-item', item.key);
        
        if (item.key.includes('temp') || item.key.includes('feelslike')) {
          card.setAttribute('data-temp', data.current[item.key]);
        }
        
        card.innerHTML = `
          <h3 class="text-lg font-medium text-gray-900">${item.label}</h3>
          <p class="text-3xl font-bold mt-2 text-blue-600">${data.current[item.key]}${item.unit}</p>
        `;
        weatherGrid.appendChild(card);
      });
      
      saveToRecentSearches(data.location.name);
    }
    
    function saveToRecentSearches(locationName) {
      let recentSearches = JSON.parse(localStorage.getItem('weatherAppRecentSearches') || '[]');
      
      if (!recentSearches.includes(locationName)) {
        recentSearches.unshift(locationName);
        recentSearches = recentSearches.slice(0, 5);
        localStorage.setItem('weatherAppRecentSearches', JSON.stringify(recentSearches));
      }
    }
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const unitToggle = document.getElementById('unit-toggle');
    let useMetric = true;
    
    if (unitToggle) {
      unitToggle.addEventListener('click', () => {
        useMetric = !useMetric;
        
        const tempCards = document.querySelectorAll('[data-temp]');
        tempCards.forEach(card => {
          const tempC = parseFloat(card.getAttribute('data-temp') || '0');
          const displayTemp = useMetric ? tempC : (tempC * 9/5) + 32;
          const unit = useMetric ? '°C' : '°F';
          
          const paragraph = card.querySelector('p');
          if (paragraph) {
            paragraph.textContent = `${displayTemp.toFixed(1)}${unit}`;
          }
        });
        
        unitToggle.textContent = useMetric ? '°C / °F' : '°F / °C';
      });
    }
  });
</script>

<style>
  .weather-app {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  @media (max-width: 640px) {
    #autocomplete-results {
      max-height: 40vh;
    }
  }
  
  #autocomplete-results li:not(:last-child) {
    border-bottom: 1px solid #e2e8f0;
  }
  
  /* Add animations */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  #weather-grid > div {
    animation: fadeIn 0.5s ease-out;
    animation-fill-mode: both;
  }
  
  #weather-grid > div:nth-child(1) { animation-delay: 0.1s; }
  #weather-grid > div:nth-child(2) { animation-delay: 0.2s; }
  #weather-grid > div:nth-child(3) { animation-delay: 0.3s; }
  #weather-grid > div:nth-child(4) { animation-delay: 0.4s; }
  #weather-grid > div:nth-child(5) { animation-delay: 0.5s; }
  #weather-grid > div:nth-child(6) { animation-delay: 0.6s; }
  #weather-grid > div:nth-child(7) { animation-delay: 0.7s; }

  #weather-icon {
    vertical-align: middle;
    display: inline-block;
  }

  #error-container {
    transition: opacity 0.3s ease-out;
  }
</style>